{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","window","AudioContext","webkitAudioContext","audioContext","createAnalyser","analyser","microphone","setMicrophone","frequency","setFrequency","myNote","setMyNote","checkAudio","fftSize","bufferLength","freqBinDataArray","Uint8Array","getByteFrequencyData","index","reduce","iMax","x","i","arr","sampleRate","useEffect","connect","console","log","setInterval","noteNum","Math","round","calculateNote","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","catch","err","error","className","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"gNAiFeA,MA5Ef,WAAgB,IAAD,EAC2BC,mBAAS,IAAIC,OAAOC,cAAgBD,OAAOE,qBADtE,mBACNC,EADM,aAEmBJ,mBAASI,EAAaC,mBAFzC,mBAENC,EAFM,aAGuBN,mBAAS,IAHhC,mBAGNO,EAHM,KAGMC,EAHN,OAIqBR,mBAAS,GAJ9B,mBAINS,EAJM,KAIKC,EAJL,OAKeV,mBAAS,GALxB,mBAKNW,EALM,KAKEC,EALF,KAkBb,SAASC,IACPP,EAASQ,QAAU,MACnB,IAAIC,EAAeT,EAASQ,QACxBE,EAAmB,IAAIC,WAAWF,GACtCT,EAASY,qBAAqBF,GAC9B,IAAIG,EAAsBH,EAObI,QAAO,SAACC,EAAMC,EAAGC,EAAGC,GAAb,OAAqBF,EAAIE,EAAIH,GAAQE,EAAIF,IAAM,GANnEX,EAAcS,GAASf,EAAaqB,WAAW,EAAInB,EAASQ,UA4C9D,OA3BAY,qBAAW,WACQ,GAAdnB,IACDA,EAAWoB,QAAQrB,GAjCrBsB,QAAQC,IAAKzB,EAAaqB,YAG1BZ,IAEAiB,YAAYjB,EAAY,QA+BxB,CAACN,IAEHmB,qBAAW,WACTd,EAhBF,SAAuBH,GACrB,IACIsB,EAAgBC,KAAKH,IAAKpB,EAAY,KAAMuB,KAAKH,IAAI,GAA3C,GAEd,MAHkB,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,MAEpEG,KAAKC,MAAOF,GAAY,IACX,IAYdG,CAAczB,MACxB,CAACA,IAEHiB,qBAAW,WACT,GAAIS,UAAUC,aAAaC,aAAa,CACtCT,QAAQC,IAAI,WAGZM,UAAUC,aAAaC,aAFL,CAAEC,OAAO,IAGlBC,MAAK,SAASC,GACXhC,EAAcJ,EAAaqC,wBAAwBD,OAEtDE,OAAM,SAASC,GACZf,QAAQgB,MAAM,UAAYD,SAGxC,CAACvC,IAID,sBAAKyC,UAAU,MAAf,UACC,6BAAKlC,IACL,+BAAKF,EAAL,aChEeqC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrBzB,MAAK,SAAC0B,GACLA,EAAaC,gBAEdxB,OAAM,SAACE,GACNhB,QAAQgB,MAAMA,EAAMuB,YE/G5BjB,K","file":"static/js/main.f70b0064.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [audioContext, setAudioContext] = useState(new(window.AudioContext || window.webkitAudioContext)());\n  const [analyser, setAnalyser] = useState(audioContext.createAnalyser());\n  const [microphone, setMicrophone] = useState(0); \n  const [frequency, setFrequency] = useState(0);\n  const [myNote, setMyNote] = useState(0);\n\n  \n\n  function beginRecording(){\n    console.log( audioContext.sampleRate);\n    \n\n    checkAudio();\n\n    setInterval(checkAudio, 100);\n  }\n\n  function checkAudio(){\n    analyser.fftSize = 32768;\n    var bufferLength = analyser.fftSize;\n    var freqBinDataArray = new Uint8Array(bufferLength);\n    analyser.getByteFrequencyData(freqBinDataArray);\n    var index = getIndexOfMax(freqBinDataArray)\n    setFrequency((index)*((audioContext.sampleRate/2)/ analyser.fftSize))\n\n    //setTimeout(checkAudio, 100);\n  }\n\n  function getIndexOfMax(array) {\n    return array.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\n  }\n\n  function calculateNote(frequency){\n    var noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n    var note = Math.round( noteNum ) + 69;\n    return noteStrings[note%12]\n}\n\n\n  useEffect( ()=>{\n    if(microphone != 0){\n      microphone.connect(analyser);\n      beginRecording();\n    }\n  },[microphone])\n\n  useEffect( ()=>{\n    setMyNote(calculateNote(frequency))\n  },[frequency])\n\n  useEffect( ()=>{\n    if (navigator.mediaDevices.getUserMedia){\n      console.log(\"Success\");\n      var constraints = { audio: true };\n  \n      navigator.mediaDevices.getUserMedia(constraints)\n              .then(function(stream) {\n                  setMicrophone(audioContext.createMediaStreamSource(stream));\n              })\n              .catch(function(err) {\n                  console.error('error: ' + err);\n              })\n    }\n  },[audioContext])\n\n\n  return (\n    <div className=\"App\">\n     <h1>{myNote}</h1>\n     <h1>{frequency} Hz</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}